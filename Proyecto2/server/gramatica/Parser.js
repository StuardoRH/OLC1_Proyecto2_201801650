/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,44],$V2=[1,25],$V3=[1,45],$V4=[1,38],$V5=[1,39],$V6=[1,43],$V7=[1,40],$V8=[1,42],$V9=[1,41],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,51],$Ve=[1,27],$Vf=[1,28],$Vg=[1,24],$Vh=[1,29],$Vi=[1,30],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[2,5,25,26,27,28,29,31,32,36,38,48,50,55,56,57,58,65,66,67,72,73,76,77,78,83,92,93,129,130,131,132,133],$Vp=[1,84],$Vq=[1,86],$Vr=[2,47],$Vs=[1,104],$Vt=[1,111],$Vu=[1,107],$Vv=[1,108],$Vw=[1,109],$Vx=[1,110],$Vy=[1,105],$Vz=[1,106],$VA=[1,114],$VB=[1,115],$VC=[1,116],$VD=[1,117],$VE=[1,118],$VF=[1,119],$VG=[1,113],$VH=[1,112],$VI=[2,8,31,32,35,36,38,48,50,52,55,56,57,58,65,66,72,77,78,83,92,93,129,130,131,132,133],$VJ=[8,52,59,61],$VK=[1,141],$VL=[1,148],$VM=[1,149],$VN=[1,150],$VO=[1,151],$VP=[1,152],$VQ=[1,153],$VR=[1,154],$VS=[1,155],$VT=[1,142],$VU=[1,143],$VV=[1,144],$VW=[1,145],$VX=[1,146],$VY=[1,147],$VZ=[8,35,40,46,47,52,60,61,85,89,107,114,115,116,117,118,119,120,121,123,124,125,126,127,128],$V_=[8,35,40,46,47,52,60,61,85,89,120,121],$V$=[1,215],$V01=[1,221],$V11=[8,35,52],$V21=[1,228],$V31=[8,35,40,46,47,52,59,60,61,84,85,89,107,114,115,116,117,118,119,120,121,123,124,125,126,127,128],$V41=[8,35,40,46,47,52,60,61,85,89,114,115,116,117,118,119,120,121,123,124],$V51=[8,35,40,46,47,52,60,61,85,89,114,115,116,117,118,119,120,121,123,124,125,126,127],$V61=[8,35,40,46,47,52,60,61,85,89,114,115,120,121],$V71=[8,35,40,46,47,52,60,61,85,89,114,115,116,117,118,119,120,121],$V81=[1,248],$V91=[35,52],$Va1=[1,258],$Vb1=[52,89],$Vc1=[1,265],$Vd1=[30,44,49],$Ve1=[1,289],$Vf1=[25,73,76],$Vg1=[32,33,96,97,98,99,105,106,108,109,110,111,112,113,122,124];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"tok_pyc":8,"ASIGNACION":9,"MODIFICACION_LISTA":10,"UNARIOS":11,"IMPRIMIR":12,"CONDICION":13,"CICLO_PARA":14,"CICLO_MIENTRAS":15,"CICLO_REPETIR_HASTA":16,"SELECCION_MULTIPLE":17,"DETENER":18,"CONTINUAR":19,"RETORNAR_SIN_VALOR":20,"RETORNAR_CON_VALOR":21,"FUNCION":22,"PROCEDIMIENTO":23,"LLAMADA_PROCEDIMIENTO":24,"resw_fin_si":25,"resw_fin_para":26,"resw_fin_mientras":27,"resw_fin_funcion":28,"resw_fin_procedimiento":29,"resw_fin_segun":30,"resw_procedimiento":31,"tok_id":32,"tok_par_Abierto":33,"PARAMETROS":34,"tok_par_Cerrado":35,"resw_ejecutar":36,"LISTA_EXPRESIONES":37,"resw_segun":38,"EXPR":39,"resw_hacer":40,"LISTA_CASOS":41,"OPCIONAL_DEFAULT":42,"CASO":43,"resw_en":44,"resw_caso":45,"resw_entonces":46,"tok_dosPuntos":47,"resw_detener":48,"resw_de_lo_contrario":49,"resw_funcion":50,"TIPO":51,"tok_coma":52,"PARAMETRO":53,"LLAMAR_FUNCIONE":54,"resw_continuar":55,"resw_retornar":56,"resw_regresar":57,"resw_para":58,"tok_asign_igual":59,"resw_hasta":60,"resw_con":61,"VALOR_INC_DEC":62,"resw_incremento_val":63,"resw_decremento_val":64,"resw_mientras":65,"resw_repetir":66,"resw_hasta_que":67,"SI_SIMPLE":68,"SI_COMPLETO":69,"SI_MULTIPLE":70,"SI_MULTIPLE_SINO":71,"resw_si":72,"resw_si_no":73,"LISTA_ELSEIF":74,"ELSEIF":75,"resw_si_no_si":76,"resw_incremento":77,"resw_decremento":78,"resw_incremento_mas":79,"resw_decremento_menos":80,"LISTA_DECLARACIONES":81,"resw_valor":82,"resw_lista":83,"tok_cor_Abierto":84,"tok_cor_Cerrado":85,"resw_de":86,"tok_lla_Abierto":87,"LISTA_CONTENIDO":88,"tok_lla_Cerrado":89,"ELEMENTO":90,"ACCESO_LISTA":91,"resw_imprimir":92,"resw_imprimirLn":93,"CASTEO":94,"EXPR_CASTEO":95,"tok_string":96,"tok_char":97,"tok_double":98,"tok_int":99,"TERNARIO":100,"ARITMETICOS":101,"RELACIONALES":102,"LOGICOS":103,"FUNCIONES_NAT":104,"resw_verdadero":105,"resw_falso":106,"tok_interrogacion":107,"resw_minuscula":108,"resw_mayuscula":109,"resw_longitud":110,"resw_truncar":111,"resw_redondear":112,"resw_tipo":113,"tok_igual":114,"tok_dif":115,"tok_mayor":116,"tok_menor":117,"tok_mayorIgual":118,"tok_menorIgual":119,"tok_and":120,"tok_or":121,"tok_not":122,"tok_sum":123,"tok_sub":124,"tok_mul":125,"tok_div":126,"tok_mod":127,"tok_expo":128,"resw_entero":129,"resw_decimal":130,"resw_booleano":131,"resw_caracter":132,"resw_cadena":133,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tok_pyc",25:"resw_fin_si",26:"resw_fin_para",27:"resw_fin_mientras",28:"resw_fin_funcion",29:"resw_fin_procedimiento",30:"resw_fin_segun",31:"resw_procedimiento",32:"tok_id",33:"tok_par_Abierto",35:"tok_par_Cerrado",36:"resw_ejecutar",38:"resw_segun",40:"resw_hacer",44:"resw_en",45:"resw_caso",46:"resw_entonces",47:"tok_dosPuntos",48:"resw_detener",49:"resw_de_lo_contrario",50:"resw_funcion",52:"tok_coma",55:"resw_continuar",56:"resw_retornar",57:"resw_regresar",58:"resw_para",59:"tok_asign_igual",60:"resw_hasta",61:"resw_con",63:"resw_incremento_val",64:"resw_decremento_val",65:"resw_mientras",66:"resw_repetir",67:"resw_hasta_que",72:"resw_si",73:"resw_si_no",76:"resw_si_no_si",77:"resw_incremento",78:"resw_decremento",79:"resw_incremento_mas",80:"resw_decremento_menos",82:"resw_valor",83:"resw_lista",84:"tok_cor_Abierto",85:"tok_cor_Cerrado",86:"resw_de",87:"tok_lla_Abierto",89:"tok_lla_Cerrado",92:"resw_imprimir",93:"resw_imprimirLn",96:"tok_string",97:"tok_char",98:"tok_double",99:"tok_int",105:"resw_verdadero",106:"resw_falso",107:"tok_interrogacion",108:"resw_minuscula",109:"resw_mayuscula",110:"resw_longitud",111:"resw_truncar",112:"resw_redondear",113:"resw_tipo",114:"tok_igual",115:"tok_dif",116:"tok_mayor",117:"tok_menor",118:"tok_mayorIgual",119:"tok_menorIgual",120:"tok_and",121:"tok_or",122:"tok_not",123:"tok_sum",124:"tok_sub",125:"tok_mul",126:"tok_div",127:"tok_mod",128:"tok_expo",129:"resw_entero",130:"resw_decimal",131:"resw_booleano",132:"resw_caracter",133:"resw_cadena"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[23,7],[23,6],[24,4],[24,5],[17,8],[41,2],[41,1],[43,7],[42,5],[42,0],[22,8],[22,7],[34,3],[34,1],[53,2],[54,3],[54,4],[18,1],[19,1],[21,2],[20,1],[14,12],[62,1],[62,1],[15,7],[16,6],[13,1],[13,1],[13,1],[13,1],[68,7],[69,9],[70,8],[71,10],[74,2],[74,1],[75,6],[11,4],[11,4],[11,2],[11,2],[9,3],[7,2],[7,4],[7,5],[7,7],[7,6],[7,5],[81,1],[81,3],[37,1],[37,3],[88,1],[88,3],[90,1],[90,3],[10,3],[12,4],[12,4],[94,4],[95,1],[95,1],[95,1],[95,1],[95,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,3],[100,5],[104,4],[104,4],[104,4],[104,4],[104,4],[104,4],[91,4],[91,4],[102,3],[102,3],[102,3],[102,3],[102,3],[102,3],[103,3],[103,3],[103,2],[101,3],[101,3],[101,3],[101,3],[101,3],[101,3],[101,2],[51,1],[51,1],[51,1],[51,1],[51,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
return []
break;
case 3:
 if ($$[$0] !== null && $$[$0] !== undefined) { $$[$0-1].push($$[$0]); } this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = []; if ($$[$0] !== null && $$[$0] !== undefined) { this.$.push($$[$0]); } 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21:
this.$ = $$[$0-1]
break;
case 22:
errores.push(new Error(this._$.first_line, this._$.first_column + 1, ErroresTypes.SYNTAX, `Error sintáctico, se recuperó en: «${yytext}»`))
break;
case 23:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, se recuperó en: «;»')); this.$ = null; 
break;
case 24:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin si»')); this.$ = null; 
break;
case 25:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin para»')); this.$ = null; 
break;
case 26:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin mientras»')); this.$ = null; 
break;
case 27:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin funcion»')); this.$ = null; 
break;
case 28:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin procedimiento»')); this.$ = null; 
break;
case 29:
 errores.push(new Error(_$[$0].first_line, _$[$0].first_column + 1, ErroresTypes.SINTACTICO, 'Error sintáctico, recuperación en «fin segun»')); this.$ = null; 
break;
case 30:
this.$ = new Procedimiento(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], "Procedimiento", $$[$0-3], $$[$0-1])
break;
case 31:
this.$ = new Procedimiento(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], "Procedimiento", [], $$[$0-1])
break;
case 32:
this.$ = new Llamadas(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], [])
break;
case 33:
this.$ = new Llamadas(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-1])
break;
case 34:

        this.$ = new Switch(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0-1]);
    
break;
case 35:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 36: case 82:
 this.$ = [$$[$0]]; 
break;
case 37:

        this.$ = { condition: $$[$0-4], body: $$[$0-1] };
    
break;
case 38:

        this.$ = $$[$0-1]; // Guardar las instrucciones del caso por defecto
    
break;
case 39:

        this.$ = null; // No hay caso por defecto
    
break;
case 40:
this.$ = new Funcion(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-6], $$[$0-2], $$[$0-4], $$[$0-1])
break;
case 41:
this.$ = new Funcion(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-2], [], $$[$0-1])
break;
case 42:
this.$.push($$[$0])
break;
case 43:
this.$ = [$$[$0]]
break;
case 44:
this.$ = new Parametro(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0])
break;
case 45:
this.$ = new LlamadaFuncion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], [])
break;
case 46:
this.$ = new LlamadaFuncion(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], $$[$0-1])
break;
case 47:
  this.$ = new Detener(_$[$0].first_line, _$[$0].first_column); 
break;
case 48:
this.$ = new Continuar(_$[$0].first_line, _$[$0].first_column);
break;
case 49:
  this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 50:
  this.$ = new Retornar(_$[$0].first_line, _$[$0].first_column);
break;
case 51:

        this.$ = new For(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0-3], $$[$0-1]);
    
break;
case 52: case 53: case 56: case 57: case 58: case 59:
 this.$ = $$[$0] 
break;
case 54:
 this.$ = new While(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]); 
break;
case 55:

        this.$ = new DoWhile(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0-1]);
    
break;
case 60:
 this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1], null) 
break;
case 61:
 this.$ = new If(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0-1]) 
break;
case 62:
 this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], null, $$[$0-1]) 
break;
case 63:
 this.$ = new If(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-4], $$[$0-1], $$[$0-3]) 
break;
case 64:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1] 
break;
case 65: case 78: case 80:
 this.$ = [$$[$0]] 
break;
case 66:
 this.$ = { condition: $$[$0-3], body: $$[$0] } 
break;
case 67: case 68:
this.$ = new Unario(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3],$$[$0-1])
break;
case 69: case 70:
this.$ = new Unario(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0],$$[$0-1])
break;
case 71:
 this.$ = new Asignaciones(_$[$0-2].first_line, _$[$0-2].first_column, [$$[$0-2]], [$$[$0]]) 
break;
case 72:
 this.$ = new DeclVar(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], $$[$0-1], undefined)
break;
case 73:
 this.$ = new DeclVar(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0-3], $$[$0]) 
break;
case 74:
 this.$ = new DeclVar(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], $$[$0-4], $$[$0]) 
break;
case 75:

        this.$ = new ListaDecla(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-5], $$[$0-3], $$[$0], null);
    
break;
case 76:

        this.$ = new ListaDecla(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], null, null, $$[$0-1]);
    
break;
case 77:

        this.$ = new ListaDecla(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], null, null, []);
    
break;
case 79: case 81:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 83:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 84: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102:
 this.$ = $$[$0]; 
break;
case 85: case 110:
 this.$ = $$[$0-1]; 
break;
case 86:
 this.$ = new ListasModificadas(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 
break;
case 87:
this.$ = new Print(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], false)
break;
case 88:
this.$ = new Print(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], true)
break;
case 89:
this.$ = new Casteo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0])
break;
case 90: case 103:
 this.$ = new Acces(_$[$0].first_line, _$[$0].first_column, $$[$0]); 
break;
case 91: case 106:
 this.$ = new Primit(_$[$0].first_line, _$[$0].first_column, $$[$0], Tip.CADENA); 
break;
case 92: case 107:
 this.$ = new Primit(_$[$0].first_line, _$[$0].first_column, $$[$0], Tip.CARACTER); 
break;
case 93: case 108:
 this.$ = new Primit(_$[$0].first_line, _$[$0].first_column, $$[$0], Tip.DECIMAL); 
break;
case 94: case 109:
 this.$ = new Primit(_$[$0].first_line, _$[$0].first_column, $$[$0], Tip.ENTERO); 
break;
case 104: case 105:
 this.$ = new Primit(_$[$0].first_line, _$[$0].first_column, $$[$0], Tip.BOOLEANO); 
break;
case 111:
 this.$ = new Ternario(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = new Minuscula(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 113:
 this.$ = new Mayuscula(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 114:
 this.$ = new longitud(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 115:
 this.$ = new Truncar(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 116:
 this.$ = new Redo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 117:
 this.$ = new Tipo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 118:
 this.$ = new AccessList(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3], [$$[$0-1]]); 
break;
case 119:
$$[$0-3].indices.push($$[$0-1]);this.$ = $$[$0-3];
break;
case 120: case 121: case 122: case 123: case 124: case 125:
this.$ = new Rel(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 126: case 127:
this.$ = new logic(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0-1], $$[$0])
break;
case 128:
this.$ = new logic(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0-1], $$[$0])
break;
case 129:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '+', $$[$0])
break;
case 130:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '-', $$[$0])
break;
case 131:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '*', $$[$0])
break;
case 132:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '/', $$[$0])
break;
case 133:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '%', $$[$0])
break;
case 134:
this.$ = new arits(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], '^', $$[$0])
break;
case 135:
this.$ = new arits(_$[$0-1].first_line, _$[$0-1].first_column, null, '-', $$[$0])
break;
case 136:
 this.$ = Tip.ENTERO 
break;
case 137:
 this.$ = Tip.DECIMAL 
break;
case 138:
 this.$ = Tip.BOOLEANO 
break;
case 139:
 this.$ = Tip.CARACTER 
break;
case 140:
 this.$ = Tip.CADENA 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{1:[3]},{2:$V0,5:[1,52],6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{1:[2,2]},o($Vo,[2,4]),{8:[1,54]},{8:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58]},{8:[1,59]},{8:[1,60]},{8:[1,61]},{8:[1,62]},{8:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66]},{8:[1,67]},{8:[1,68]},{8:[1,69]},{8:[1,70]},{8:[1,71],25:[1,72],26:[1,73],27:[1,74],28:[1,75],29:[1,76],30:[1,77]},{32:[1,79],81:78},{32:[1,80]},{59:[1,81],79:[1,82],80:[1,83],84:$Vp},{59:[1,85],84:$Vq},{33:[1,87]},{33:[1,88]},{33:[1,89]},{33:[1,90]},{8:[2,56]},{8:[2,57]},{8:[2,58]},{8:[2,59]},{32:[1,91]},{33:[1,92]},{2:$V0,4:93,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{33:[1,94]},{8:$Vr},{8:[2,48]},{8:[2,50]},{32:$Vs,33:$Vt,39:95,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:[1,120]},{32:[1,121]},{32:[1,122]},o($VI,[2,136]),o($VI,[2,137]),o($VI,[2,138]),o($VI,[2,139]),o($VI,[2,140]),{33:[1,123]},{1:[2,1]},o($Vo,[2,3]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),{8:[2,72],52:[1,126],59:[1,124],61:[1,125]},o($VJ,[2,78]),{59:[1,128],84:[1,127]},{32:$Vs,33:$Vt,39:129,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{8:[2,69]},{8:[2,70]},{32:$Vs,33:$Vt,39:130,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:131,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:132,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:[1,133]},{32:[1,134]},{32:$Vs,33:$Vt,39:135,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:136,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{59:[1,137]},{32:$Vs,33:$Vt,39:138,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,67:[1,139],68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{32:$Vs,33:$Vt,39:140,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{8:[2,49],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97],{84:$Vq}),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,103],{33:[1,156],84:$Vp}),o($VZ,[2,104]),o($VZ,[2,105]),o($VZ,[2,106]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109]),{32:$Vs,33:$Vt,39:157,51:158,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{32:$Vs,33:$Vt,39:159,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:160,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{33:[1,161]},{33:[1,162]},{33:[1,163]},{33:[1,164]},{33:[1,165]},{33:[1,166]},{33:[1,167]},{33:[1,168]},{33:[1,169]},{32:$Vs,33:$Vt,39:170,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,37:171,39:172,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{82:[1,173]},{32:[1,174]},{32:$Vs,33:$Vt,39:175,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{87:[1,176]},{8:[2,71],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{85:[1,177],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{8:[2,86],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{85:[1,178],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,179]},{35:[1,180]},{35:[1,181],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,182],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{32:$Vs,33:$Vt,39:183,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{35:[1,184],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{33:[1,185]},{35:[1,186],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{32:$Vs,33:$Vt,39:187,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:188,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:189,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:190,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:191,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:192,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:193,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:194,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:195,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:196,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:197,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:198,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:199,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:200,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:201,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,35:[1,202],37:203,39:172,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{35:[1,204],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,205]},o([8,35,40,46,47,52,60,61,85,89,114,115,116,117,118,119,120,121,123,124,125,126,127,128],[2,135],{107:$VK}),o($V_,[2,128],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),{32:$Vs,33:$Vt,39:206,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:207,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:208,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:209,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:210,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:211,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$V$,34:212,35:[1,213],53:214},{32:$V$,34:216,35:[1,217],53:214},{32:$Vs,33:$Vt,35:[1,218],37:219,39:172,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{35:[1,220],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{8:[2,73],52:$V01},o($V11,[2,80],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),{32:$Vs,33:$Vt,37:222,39:172,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},o($VJ,[2,79]),{85:[1,223],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{32:$Vs,33:$Vt,39:227,54:103,87:$V21,88:224,89:[1,225],90:226,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},o($V31,[2,118]),o($V31,[2,119]),{8:[2,67]},{8:[2,68]},{8:[2,87]},{8:[2,88]},{60:[1,229],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{40:[1,230]},{32:$Vs,33:$Vt,39:231,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{40:[1,232]},{47:[1,233],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},o($V41,[2,129],{107:$VK,125:$VV,126:$VW,127:$VX,128:$VY}),o($V41,[2,130],{107:$VK,125:$VV,126:$VW,127:$VX,128:$VY}),o($V51,[2,131],{107:$VK,128:$VY}),o($V51,[2,132],{107:$VK,128:$VY}),o($V51,[2,133],{107:$VK,128:$VY}),o($V51,[2,134],{107:$VK,128:$VY}),o($V61,[2,120],{107:$VK,116:$VN,117:$VO,118:$VP,119:$VQ,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V61,[2,121],{107:$VK,116:$VN,117:$VO,118:$VP,119:$VQ,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V71,[2,122],{107:$VK,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V71,[2,123],{107:$VK,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V71,[2,124],{107:$VK,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V71,[2,125],{107:$VK,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($V_,[2,126],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o([8,35,40,46,47,52,60,61,85,89,121],[2,127],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),o($VZ,[2,45]),{35:[1,234],52:$V01},o($VZ,[2,110]),{32:[1,236],95:235,96:[1,237],97:[1,238],98:[1,239],99:[1,240]},{35:[1,241],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,242],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,243],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,244],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,245],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,246],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{35:[1,247],52:$V81},{51:249,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},o($V91,[2,43]),{51:250,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{35:[1,251],52:$V81},{2:$V0,4:252,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,32]},{35:[1,253],52:$V01},{46:[1,254]},{32:$Vs,33:$Vt,39:255,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{8:[2,74],52:$V01},{86:[1,256]},{52:$Va1,89:[1,257]},{8:[2,77]},o($Vb1,[2,82]),o($Vb1,[2,84],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),{32:$Vs,33:$Vt,39:227,54:103,87:$V21,88:259,90:226,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{32:$Vs,33:$Vt,39:260,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{2:$V0,4:261,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{35:[1,262],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{41:263,43:264,44:$Vc1},{32:$Vs,33:$Vt,39:266,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},o($VZ,[2,46]),o($VZ,[2,89]),o($VZ,[2,90]),o($VZ,[2,91]),o($VZ,[2,92]),o($VZ,[2,93]),o($VZ,[2,94]),o($VZ,[2,112]),o($VZ,[2,113]),o($VZ,[2,114]),o($VZ,[2,115]),o($VZ,[2,116]),o($VZ,[2,117]),{51:267,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{32:$V$,53:268},{2:$V0,4:269,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},o($V91,[2,44]),{2:$V0,4:270,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:[1,271],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,33]},{2:$V0,4:272,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},o($V11,[2,81],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),{51:273,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,76]},{32:$Vs,33:$Vt,39:227,54:103,87:$V21,90:274,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{52:$Va1,89:[1,275]},{61:[1,276],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,27:[1,277],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,55]},{30:[2,39],42:278,43:279,44:$Vc1,49:[1,280]},o($Vd1,[2,36]),{45:[1,281]},o([8,35,40,46,47,52,60,61,85,89],[2,111],{107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY}),{2:$V0,4:282,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},o($V91,[2,42]),{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:[1,283],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,29:[1,284],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,31]},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,285],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,73:[1,286],74:287,75:288,76:$Ve1,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,75]},o($Vb1,[2,83]),o($Vb1,[2,85]),{62:290,63:[1,291],64:[1,292]},{8:[2,54]},{30:[1,293]},o($Vd1,[2,35]),{46:[1,294]},{32:$Vs,33:$Vt,39:295,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,28:[1,296],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,41]},{8:[2,30]},{8:[2,60]},{2:$V0,4:297,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{25:[1,298],73:[1,299],75:300,76:$Ve1},o($Vf1,[2,65]),{33:[1,301]},{32:$Vs,33:$Vt,39:302,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},o($Vg1,[2,52]),o($Vg1,[2,53]),{8:[2,34]},{47:[1,303]},{46:[1,304],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{8:[2,40]},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,305],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,62]},{2:$V0,4:306,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},o($Vf1,[2,64]),{32:$Vs,33:$Vt,39:307,54:103,91:98,94:102,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:96,101:97,102:99,103:100,104:101,105:$Vy,106:$Vz,108:$VA,109:$VB,110:$VC,111:$VD,112:$VE,113:$VF,122:$VG,124:$VH},{40:[1,308],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{2:$V0,4:309,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{47:[1,310]},{8:[2,61]},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:[1,311],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{35:[1,312],107:$VK,114:$VL,115:$VM,116:$VN,117:$VO,118:$VP,119:$VQ,120:$VR,121:$VS,123:$VT,124:$VU,125:$VV,126:$VW,127:$VX,128:$VY},{2:$V0,4:313,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:[1,314],50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{2:$V0,4:315,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,63]},{46:[1,316]},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,26:[1,317],31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:$Vr,30:[2,38]},{2:$V0,6:53,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:[1,318],50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{2:$V0,4:319,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,51:23,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,68:31,69:32,70:33,71:34,72:$Vd,77:$Ve,78:$Vf,83:$Vg,91:26,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn},{8:[2,51]},o($Vd1,[2,37],{8:$Vr}),o($Vf1,[2,66],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,51:23,91:26,68:31,69:32,70:33,71:34,6:53,2:$V0,31:$V1,32:$V2,36:$V3,38:$V4,48:$V5,50:$V6,55:$V7,56:$V8,57:$V9,58:$Va,65:$Vb,66:$Vc,72:$Vd,77:$Ve,78:$Vf,83:$Vg,92:$Vh,93:$Vi,129:$Vj,130:$Vk,131:$Vl,132:$Vm,133:$Vn})],
defaultActions: {3:[2,2],31:[2,56],32:[2,57],33:[2,58],34:[2,59],39:[2,47],40:[2,48],41:[2,50],52:[2,1],82:[2,69],83:[2,70],179:[2,67],180:[2,68],181:[2,87],182:[2,88],218:[2,32],225:[2,77],253:[2,33],257:[2,76],262:[2,55],271:[2,31],273:[2,75],277:[2,54],283:[2,41],284:[2,30],285:[2,60],293:[2,34],296:[2,40],298:[2,62],305:[2,61],311:[2,63],317:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

//_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// jaavascript
    const { errores, tokens } = require('../class/util/out');
    const { Tokens } = require('../class/util/Tokens');
    const { Error } = require('../class/util/Error');
    const { ErroresTypes } = require ('../class/util/ErroresTypes')
    const { Ternario } = require ('../class/Expresiones/Ternario');
    /* ==== Manejo de errores global para NO detener el parseo ==== */

    if (typeof parser !== 'undefined') {
        const originalParseError = parser.parseError;
        parser.parseError = function (str, hash) {
            try {
                const loc = (hash && (hash.loc || (hash.lexer && hash.lexer.yylloc))) || { first_line: 0, first_column: 0 };
                const tok = (hash && hash.token) || '?';
                if (hash && hash.recoverable) {
                    errores.push(new Error(loc.first_line, loc.first_column + 1, ErroresTypes.SINTACTICO, `Error sintáctico, se recuperó en: «${tok}»`));
                    return; // permitir recuperación via reglas con 'error'
                }
                errores.push(new Error(loc.first_line, loc.first_column + 1, ErroresTypes.SINTACTICO, str));
            } catch (e) {
            // fallback: no lanzar
            }
        };
    }

    // Tipos
        const { Tip } = require ('../class/util/Tip')
        // Instrucciones
        const {Asignaciones} = require ('../class/Instrucciones/Asignaciones')
        const { DeclVar } = require ('../class/Instrucciones/DeclVar')
        const { Print } = require ('../class/Instrucciones/Print')
        const { Unario } = require ('../class/Instrucciones/Unario')
        const { If } = require ('../class/Instrucciones/If')
        const { ListaDecla } = require ('../class/Instrucciones/ListaDecla')
        const { ListasModificadas } = require ('../class/Instrucciones/ListasModificadas')
        const { For } = require ('../class/Instrucciones/For')
        const { While } = require ('../class/Instrucciones/While')
        const { DoWhile } = require ('../class/Instrucciones/DoWhile')
        const { Detener } = require ('../class/Instrucciones/Detener')
        const { Continuar } = require ('../class/Instrucciones/Continuar')
        const { Retornar } = require ('../class/Instrucciones/Retornar')
        const { Funcion } = require ('../class/Instrucciones/Funcion')
        const { Switch } = require ('../class/Instrucciones/Switch')
        const { Procedimiento } = require ('../class/Instrucciones/Procedimiento')
        const { Llamadas } = require ('../class/Instrucciones/Llamadas')
        // Expresiones
        const { Casteo } = require ('../class/Expresiones/Casteo')
        const { Primit } = require ('../class/Expresiones/Primit')
        const { Acces } = require ('../class/Expresiones/Acces')
        const { arits } = require ('../class/Expresiones/arits')
        const { Rel } = require ('../class/Expresiones/Rel')
        const { logic } = require ('../class/Expresiones/logic')
        const { AccessList } = require ('../class/Expresiones/AccesList')
        const { Minuscula } = require ('../class/Expresiones/Minuscula')
        const { Mayuscula } = require ('../class/Expresiones/Mayuscula')
        const { longitud } = require ('../class/Expresiones/longitud')
        const { Truncar } = require ('../class/Expresiones/Truncar')
        const { Tipo } = require ('../class/Expresiones/Tipo')
        const { Redo } = require ('../class/Expresiones/Redo')
        const { Parametro } = require ('../class/Expresiones/Parametro')
        const { LlamadaFuncion } = require ('../class/Expresiones/LlamadaFuncion')
        const { Return } = require ('../class/Expresiones/Return')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4: 
    tokens.push(new Tokens('resw_imprimirLn', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 93; 

break;
case 5: 
    tokens.push(new Tokens('resw_imprimirLn', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 93; 

break;
case 6:
    tokens.push(new Tokens('resw_si_no', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 73;

break;
case 7:
    tokens.push(new Tokens('resw_si_no_si', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 76;

break;
case 8:
    tokens.push(new Tokens('resw_fin_si', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 25;

break;
case 9:
    tokens.push(new Tokens('resw_fin_para', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 26;

break;
case 10:
    tokens.push(new Tokens('resw_fin_mientras', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 27;

break;
case 11:
    tokens.push(new Tokens('resw_fin_funcion', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 28;

break;
case 12:
    tokens.push(new Tokens('resw_fin_procedimiento', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 29;

break;
case 13:
    tokens.push(new Tokens('resw_fin_segun', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 30;

break;
case 14:
    tokens.push(new Tokens('resw_hasta_que', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
    return 67;

break;
case 15: 
    tokens.push(new Tokens('resw_imprimir', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 92; 

break;
case 16: 
    tokens.push(new Tokens('resw_con', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 61; 

break;
case 17: 
    tokens.push(new Tokens('resw_valor', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 82; 

break;
case 18: 
    tokens.push(new Tokens('resw_verdadero', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 105;

break;
case 19: 
    tokens.push(new Tokens('resw_falso', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 106; 

break;
case 20: 
    tokens.push(new Tokens('resw_incremento', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 77;

break;
case 21: 
    tokens.push(new Tokens('resw_decremento', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 78;

break;
case 22: 
    tokens.push(new Tokens('resw_lista', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 83; 

break;
case 23:
    tokens.push(new Tokens('resw_si_no_si', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 76;

break;
case 24:
    tokens.push(new Tokens('resw_si_no', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 73;

break;
case 25: 
    tokens.push(new Tokens('resw_si', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 72; 

break;
case 26: 
    tokens.push(new Tokens('resw_entonces', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 46; 

break;
case 27:
    tokens.push(new Tokens('resw_fin_si', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 25;

break;
case 28:
    tokens.push(new Tokens('resw_fin_para', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 26;

break;
case 29:
    tokens.push(new Tokens('resw_fin_mientras', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 27;

break;
case 30:
    tokens.push(new Tokens('resw_fin_funcion', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 28;

break;
case 31:
    tokens.push(new Tokens('resw_fin_procedimiento', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 29;

break;
case 32:
    tokens.push(new Tokens('resw_fin_segun', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 30;

break;
case 33: 
    tokens.push(new Tokens('resw_de', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 86; 

break;
case 34: 
    tokens.push(new Tokens('resw_de_lo_contrario', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 49; 

break;
case 35: 
    tokens.push(new Tokens('resw_entero', 'tipo_dato', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 129; 

break;
case 36: 
    tokens.push(new Tokens('resw_decimal', 'tipo_dato', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 130; 

break;
case 37: 
    tokens.push(new Tokens('resw_booleano', 'tipo_dato', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 131; 

break;
case 38: 
    tokens.push(new Tokens('resw_caracter', 'tipo_dato', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 132; 

break;
case 39: 
    tokens.push(new Tokens('resw_cadena', 'tipo_dato', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 133; 

break;
case 40: 
    tokens.push(new Tokens('resw_para', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 58; 

break;
case 41:
    tokens.push(new Tokens('resw_hasta_que', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 67; 

break;
case 42: 
    tokens.push(new Tokens('resw_hasta', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 60; 

break;
case 43: 
    tokens.push(new Tokens('resw_incremento_val', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 63; 

break;
case 44: 
    tokens.push(new Tokens('resw_decremento_val', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 64; 

break;
case 45:
    tokens.push(new Tokens('resw_incremento_mas', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 79; 

break;
case 46:
    tokens.push(new Tokens('resw_decremento_menos', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 80; 

break;
case 47: 
    tokens.push(new Tokens('resw_hacer', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 40; 

break;
case 48: 
    tokens.push(new Tokens('resw_mientras', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 65; 

break;
case 49: 
    tokens.push(new Tokens('resw_repetir', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 66; 

break;
case 50: 
    tokens.push(new Tokens('resw_detener', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 48; 

break;
case 51: 
    tokens.push(new Tokens('resw_continuar', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 55; 

break;
case 52: 
    tokens.push(new Tokens('resw_retornar', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 56; 

break;
case 53: 
    tokens.push(new Tokens('resw_regresar', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 57; 

break;
case 54: 
    tokens.push(new Tokens('resw_minuscula', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 108; 

break;
case 55: 
    tokens.push(new Tokens('resw_mayuscula', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 109; 

break;
case 56: 
    tokens.push(new Tokens('resw_longitud', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 110; 

break;
case 57: 
    tokens.push(new Tokens('resw_truncar', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 111; 

break;
case 58: 
    tokens.push(new Tokens('resw_redondear', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 112; 

break;
case 59: 
    tokens.push(new Tokens('resw_tipo', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 113; 

break;
case 60: 
    tokens.push(new Tokens('resw_funcion', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 50; 

break;
case 61: 
    tokens.push(new Tokens('resw_procedimiento', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 31; 

break;
case 62: 
    tokens.push(new Tokens('resw_ejecutar', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 36;

break;
case 63: 
    tokens.push(new Tokens('resw_segun', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 38; 

break;
case 64: 
    tokens.push(new Tokens('resw_caso', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 45; 

break;
case 65: 
    tokens.push(new Tokens('resw_en', 'reservada', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 44; 

break;
case 66: 
    tokens.push(new Tokens('tok_id', 'identificador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 32; 

break;
case 67: 
    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); 
    tokens.push(new Tokens('tok_string', 'cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 96; 

break;
case 68: 
    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2); 
    tokens.push(new Tokens('tok_char', 'caracter', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 97; 

break;
case 69: 
    tokens.push(new Tokens('tok_double', 'decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 98; 

break;
case 70: 
    tokens.push(new Tokens('tok_int', 'entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 99; 

break;
case 71: 
    tokens.push(new Tokens('tok_igual', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 114; 

break;
case 72: 
    tokens.push(new Tokens('tok_asign_igual', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 59; 

break;
case 73: 
    tokens.push(new Tokens('tok_dif', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 115; 

break;
case 74: 
    tokens.push(new Tokens('tok_mayorIgual', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 118; 

break;
case 75: 
    tokens.push(new Tokens('tok_menorIgual', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 119; 

break;
case 76: 
    tokens.push(new Tokens('tok_mayor', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 116; 

break;
case 77: 
    tokens.push(new Tokens('tok_menor', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 117; 

break;
case 78: 
    tokens.push(new Tokens('tok_and', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 120; 

break;
case 79: 
    tokens.push(new Tokens('tok_or', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 121; 

break;
case 80: 
    tokens.push(new Tokens('tok_not', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 122; 

break;
case 81: 
    tokens.push(new Tokens('tok_sum', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 123; 

break;
case 82: 
    tokens.push(new Tokens('tok_sub', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 124; 

break;
case 83: 
    tokens.push(new Tokens('tok_mul', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 125; 

break;
case 84: 
    tokens.push(new Tokens('tok_div', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 126; 

break;
case 85: 
    tokens.push(new Tokens('tok_mod', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 127; 

break;
case 86: 
    tokens.push(new Tokens('tok_expo', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 128; 

break;
case 87: 
    tokens.push(new Tokens('tok_par_Abierto', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 33; 

break;
case 88: 
    tokens.push(new Tokens('tok_par_Cerrado', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 35; 

break;
case 89: 
    tokens.push(new Tokens('tok_coma', 'separador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 52; 

break;
case 90: 
    tokens.push(new Tokens('tok_cor_Abierto', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 84; 

break;
case 91: 
    tokens.push(new Tokens('tok_cor_Cerrado', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 85; 

break;
case 92: 
    tokens.push(new Tokens('tok_lla_Abierto', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 87; 

break;
case 93: 
    tokens.push(new Tokens('tok_lla_Cerrado', 'agrupacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 89; 

break;
case 94: 
    tokens.push(new Tokens('tok_pyc', 'puntuacion', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 8; 

break;
case 95: 
    tokens.push(new Tokens('tok_interrogacion', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 107; 

break;
case 96: 
    tokens.push(new Tokens('tok_dosPuntos', 'operador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    return 47; 

break;
case 97: errores.push(new Error(yy_.yylloc.first_line, yy_.yylloc.first_column + 1, ErroresTypes.LEXICAL, `Caracter no reconocido «${yy_.yytext}»`)); 
break;
case 98: return 5          
break;
}
},
rules: [/^(?:\n)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:([\s\r\t]+))/,/^(?:imprimirLn\b)/,/^(?:imprimir[ \t\r\n]+nl\b)/,/^(?:de[ \t\r\n]+lo[ \t\r\n]+contrario\b)/,/^(?:o[ \t\r\n]+si\b)/,/^(?:fin[ \t\r\n]+si\b)/,/^(?:fin[ \t\r\n]+para\b)/,/^(?:fin[ \t\r\n]+mientras\b)/,/^(?:fin[ \t\r\n]+funcion\b)/,/^(?:fin[ \t\r\n]+procedimiento\b)/,/^(?:fin[ \t\r\n]+segun\b)/,/^(?:hasta[ \t\r\n]+que\b)/,/^(?:imprimir\b)/,/^(?:con\b)/,/^(?:valor\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:inc\b)/,/^(?:dec\b)/,/^(?:Lista\b)/,/^(?:si no si\b)/,/^(?:si no\b)/,/^(?:si\b)/,/^(?:entonces\b)/,/^(?:fin si\b)/,/^(?:fin para\b)/,/^(?:fin mientras\b)/,/^(?:fin funcion\b)/,/^(?:fin procedimiento\b)/,/^(?:fin segun\b)/,/^(?:de\b)/,/^(?:de lo contrario\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:booleano\b)/,/^(?:caracter\b)/,/^(?:cadena\b)/,/^(?:para\b)/,/^(?:hasta que\b)/,/^(?:hasta\b)/,/^(?:incremento\b)/,/^(?:decremento\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:hacer\b)/,/^(?:mientras\b)/,/^(?:repetir\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:retornar\b)/,/^(?:regresar\b)/,/^(?:minuscula\b)/,/^(?:mayuscula\b)/,/^(?:longitud\b)/,/^(?:truncar\b)/,/^(?:redondear\b)/,/^(?:Tipo\b)/,/^(?:funcion\b)/,/^(?:procedimiento\b)/,/^(?:ejecutar\b)/,/^(?:segun\b)/,/^(?:caso\b)/,/^(?:en\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:("((([^\n\"\\]|\\.))*)"))/,/^(?:('((([^\n\"\\]|\\.)))'))/,/^(?:([0-9]+\.[0-9]+\b))/,/^(?:([0-9]+\b))/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\?)/,/^(?::)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}