// analizador lexico 
%{
// jaavascript
    const { errores, tokens } = require('../class/util/out');
    const { Tokens } = require('../class/util/Tokens');
    const { Error } = require('../class/util/Error');
    const { ErrType } = require ('../class/util/ErroresTypes')
    const { Ternario } = require ('../class/Expresiones/Ternario');
%}
%lex
//Expresiones regulares para los tokens
UNUSED      [\s\r\t]+
CONTENT     ([^\n\"\\]|\\.)
ID          [a-zA-Z_][a-zA-Z0-9_]*
STRING      \"({CONTENT}*)\"
CHAT        \'({CONTENT})\'
INTEGER     [0-9]+\b
DOUBLE      [0-9]+\.[0-9]+\b
COMMENTS    \/\/.*
COMMENTM    [/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]
DIMENSION     [1-3]
%%
//reglas semanticas
\n                      {}
{COMMENTS}              {}
{COMMENTM}              {}
{UNUSED}                {}
// === TOKENS ===
// === RESERVADAS ===
'ingresar' { 
    tokens.push(new Tokens('resw_ingresar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_ingresar';  
}
'como' { 
    tokens.push(new Tokens('resw_como', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_como';      
}
'con' { 
    tokens.push(new Tokens('resw_con', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_con';       
}
'valor' { 
    tokens.push(new Tokens('resw_valor', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_valor';     
}
'imprimir' { 
    tokens.push(new Tokens('resw_imprimir', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_imprimir';  
}
'verdadero' { 
    tokens.push(new Tokens('resw_verdadero', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_verdadero';
}
'falso' { 
    tokens.push(new Tokens('resw_falso', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_falso';     
}
'inc' { 
    tokens.push(new Tokens('resw_incremento', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_incremento';
}
'dec' { 
    tokens.push(new Tokens('resw_decremento', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_decremento';
}
'Lista' { 
    tokens.push(new Tokens('resw_lista', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_lista';     
}
'si' { 
    tokens.push(new Tokens('resw_si', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_si';        
}
'entonces' { 
    tokens.push(new Tokens('resw_entonces', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_entonces';  
}
'de' { 
    tokens.push(new Tokens('resw_de', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_de';     
}
'lo' { 
    tokens.push(new Tokens('resw_lo', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_lo';     
}
'contrario' { 
    tokens.push(new Tokens('resw_contrario', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_contrario'; 
}

'fin metodo' { 
    tokens.push(new Tokens('resw_metodo_fin', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_metodo_fin';  
}


'fin' { 
    tokens.push(new Tokens('resw_fin', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_fin';     
}
'o' {
    tokens.push(new Tokens('resw_o', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_o';        
}
'que' { 
    tokens.push(new Tokens('resw_que', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_que';     
}
// === TIPOS DE DATOS ===
'entero' { 
    tokens.push(new Tokens('resw_entero', 'tipo_dato', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_entero';   
}
'decimal' { 
    tokens.push(new Tokens('resw_decimal', 'tipo_dato', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_decimal';  
}
'booleano' { 
    tokens.push(new Tokens('resw_booleano', 'tipo_dato', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_booleano'; 
}
'caracter' { 
    tokens.push(new Tokens('resw_caracter', 'tipo_dato', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_caracter'; 
}
'cadena' { 
    tokens.push(new Tokens('resw_cadena', 'tipo_dato', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_cadena';   
}
'para' { 
    tokens.push(new Tokens('resw_para', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_para';     
}
'hasta' { 
    tokens.push(new Tokens('resw_hasta', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_hasta';   
}
'con' { 
    tokens.push(new Tokens('resw_con', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_con';     
}
'incremento'  { 
    tokens.push(new Tokens('resw_incremento_entero', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_incremento_entero';     
}
'decremento'  { 
    tokens.push(new Tokens('resw_decremento_entero', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_decremento_entero';     
}
'++' {
    tokens.push(new Tokens('resw_incremento_mas', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_incremento_mas';    
}
'--' {
    tokens.push(new Tokens('resw_decremento_menos', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_decremento_menos';    
}
'hacer' { 
    tokens.push(new Tokens('resw_hacer', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_hacer';    
}
'mientras' { 
    tokens.push(new Tokens('resw_mientras', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_mientras';  
}
'repetir' { 
    tokens.push(new Tokens('resw_repetir', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_repetir';    
}
'detener' { 
    tokens.push(new Tokens('resw_detener', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_detener';  
}
'continuar' { 
    tokens.push(new Tokens('resw_continuar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_continuar';  
}
'retornar' { 
    tokens.push(new Tokens('resw_retornar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_retornar';  
}
'minuscula' { 
    tokens.push(new Tokens('resw_minuscula', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_minuscula';  
}
'mayuscula' { 
    tokens.push(new Tokens('resw_mayuscula', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_mayuscula';  
}
'longitud' { 
    tokens.push(new Tokens('resw_longitud', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_longitud';  
}
'truncar' { 
    tokens.push(new Tokens('resw_truncar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_truncar';  
}
'redondear' { 
    tokens.push(new Tokens('resw_redondear', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_redondear';  
}
'Tipo' { 
    tokens.push(new Tokens('resw_tipo', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_tipo';  
}
'funcion' { 
    tokens.push(new Tokens('resw_funcion', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_funcion';  
}
'parametros' { 
    tokens.push(new Tokens('resw_parametros', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_parametros';  
}
'regresar' { 
    tokens.push(new Tokens('resw_regresar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_regresar';  
}
'procedimiento' { 
    tokens.push(new Tokens('resw_procedimiento', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_procedimiento';  
}
'ejecutar' { 
    tokens.push(new Tokens('resw_ejecutar', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_ejecutar';
}
'segun' { 
    tokens.push(new Tokens('resw_segun', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_segun';  
}
'caso' { 
    tokens.push(new Tokens('resw_caso', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_caso';  
}
'ser' { 
    tokens.push(new Tokens('resw_ser', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_ser';  
}
'de' { 
    tokens.push(new Tokens('resw_de', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_de';  
}
'en' { 
    tokens.push(new Tokens('resw_en', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_en';  
}
'imprimirLn' { 
    tokens.push(new Tokens('resw_imprimirLn', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'imprimirLn';  
}
'objeto' { 
    tokens.push(new Tokens('resw_objeto', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_objeto';  
}
'metodo' { 
    tokens.push(new Tokens('resw_metodo', 'reservada', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'resw_metodo';  
}


// === EXPRESIONES ===
{ID} { 
    tokens.push(new Tokens('tok_id', 'identificador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_id';       
}
{STRING} { 
    yytext = yytext.substr(1,yyleng - 2); 
    tokens.push(new Tokens('tok_string', 'cadena', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_string';   
}
{CHAT} { 
    yytext = yytext.substr(1,yyleng - 2); 
    tokens.push(new Tokens('tok_char', 'caracter', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_char';     
}
{DOUBLE} { 
    tokens.push(new Tokens('tok_double', 'decimal', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_double';   
}
{INTEGER} { 
    tokens.push(new Tokens('tok_int', 'entero', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_int';  
}
// === ASIGNACION ===
'?' {  
    tokens.push(new Tokens('tok_interrogacion', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_interrogacion'; 
}
':' {  
    tokens.push(new Tokens('tok_dosPuntos', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_dosPuntos'; 
}

'-> metodo' { 
    tokens.push(new Tokens('tok_asign_metodo', 'operador', yytext, yylloc.first_line, yylloc.first_column));    
    }

'==' { 
    tokens.push(new Tokens('tok_igual', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_igual'; 
}
'=' { 
    tokens.push(new Tokens('tok_asign_igual', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_asign_igual';  
}
// === RELACIONALES ===
'!=' { 
    tokens.push(new Tokens('tok_dif', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_dif';     
}
'>=' { 
    tokens.push(new Tokens('tok_mayorIgual', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_mayorIgual'; 
}
'<=' { 
    tokens.push(new Tokens('tok_menorIgual', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_menorIgual'; 
}
'>' { 
    tokens.push(new Tokens('tok_mayor', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_mayor'; 
}
'<' { 
    tokens.push(new Tokens('tok_menor', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_menor'; 
}
// === LOGICOS ===
'&&' { 
    tokens.push(new Tokens('tok_and', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_and'; 
}
'||' { 
    tokens.push(new Tokens('tok_or', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_or'; 
}
'!' { 
    tokens.push(new Tokens('tok_not', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_not';     
}
// === ARITMETICOS ====
'+' { 
    tokens.push(new Tokens('tok_sum', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_sum';     
}
'-' { 
    tokens.push(new Tokens('tok_sub', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_sub';    
}
'*' { 
    tokens.push(new Tokens('tok_mul', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_mul';     
}
'/' { 
    tokens.push(new Tokens('tok_div', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_div';      
}
'%' { 
    tokens.push(new Tokens('tok_mod', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_mod';      
}
'^' { 
    tokens.push(new Tokens('tok_expo', 'operador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_expo';     
}


// === SIGNOS DE AGRUPACION Y FINALIZACION ===

';' { 
    tokens.push(new Tokens('tok_pyc', 'puntuacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_pyc'; 
}

'{' { 
    tokens.push(new Tokens('tok_lla_Abierto', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_lla_Abierto'; 
}
'}' { 
    tokens.push(new Tokens('tok_lla_Cerrado', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_lla_Cerrado'; 
}

'(' { 
    tokens.push(new Tokens('tok_par_Abierto', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_par_Abierto';     
}
')' { 
    tokens.push(new Tokens('tok_par_Cerrado', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_par_Cerrado';     
}
',' { 
    tokens.push(new Tokens('tok_coma', 'separador', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_coma';     
}
'[' { 
    tokens.push(new Tokens('tok_cor_Abierto', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_cor_Abierto';     
}
']' { 
    tokens.push(new Tokens('tok_cor_Cerrado', 'agrupacion', yytext, yylloc.first_line, yylloc.first_column)); 
    return 'tok_cor_Cerrado';     
}
.                       { errores.push(new Error(yylloc.first_line, yylloc.first_column + 1, ErrType.LEXICAL, `Caracter no reconocido «${yytext}»`)); }
<<EOF>>                 { return 'EOF'         }                      { return 'EOF';             }
/lex
// analizador sintactico
%{
    // Tipos
        const { Tip } = require ('../class/util/Tip')
        // Instrucciones
        const {Asignacion} = require ('../class/Instrucciones/Asignacion')
        const { DeclVar } = require ('../class/Instrucciones/DeclVar')
        const { print } = require ('../class/Instrucciones/Print')
        const { Unarios } = require ('../class/Instrucciones/Unario')
        const { IfStatement } = require ('../class/Instrucciones/If')
        const { ListDeclaration } = require ('../class/Instrucciones/ListaDecla')
        const { ModifyList } = require ('../class/Instrucciones/ListasModificadas')
        const { ForLoop } = require ('../class/Instrucciones/For')
        const { While } = require ('../class/Instrucciones/While')
        const { DoWhileLoop } = require ('../class/Instrucciones/DoWhile')
        const { Detener } = require ('../class/Instrucciones/Detener')
        const { Continuar } = require ('../class/Instrucciones/Continuar')
        const { Retornar } = require ('../class/Instrucciones/Retornar')
        const { Funcion } = require ('../class/Instrucciones/Funcion')
        const { SwitchStatement } = require ('../class/Instrucciones/Switch')
        const { Procedimiento } = require ('../class/Instrucciones/Procedimiento')
        const { LlamadaProcedimiento } = require ('../class/Instrucciones/Llamadas')
        const { GuardarObjeto } = require ('../class/Instrucciones/GuardarObj')
        // Expresiones
        const { Casteo } = require ('../class/Expresiones/Casteo')
        const { Primit } = require ('../class/Expresiones/Primit')
        const { Acces } = require ('../class/Expresiones/Acces')
        const { Arit } = require ('../class/Expresiones/arit')
        const { Rel } = require ('../class/Expresiones/Rel')
        const { logic } = require ('../class/Expresiones/logic')
        const { AccessList } = require ('../class/Expresiones/AccesList')
        const { Minuscula } = require ('../class/Expresiones/Minuscula')
        const { Mayuscula } = require ('../class/Expresiones/Mayuscula')
        const { Longitud } = require ('../class/Expresiones/longitud')
        const { Truncar } = require ('../class/Expresiones/Truncar')
        const { Tipo } = require ('../class/Expresiones/Tipo')
        const { Redo } = require ('../class/Expresiones/Redo')
        const { Parametro } = require ('../class/Expresiones/Parametro')
        const { LlamadaFUncion } = require ('../class/Expresiones/LlamadaFuncion')
        const { Return } = require ('../class/Expresiones/Return')
        const { ObjectAcces } = require ('../class/Expresiones/ObjectAcces')
        const { Atributo } = require ('../class/Expresiones/Atributo')

%}
//procedencia de operadores
%right tok_ternario
%left tok_or               // Operador OR (||) - menor precedencia
%left tok_and              // Operador AND (&&)
%right tok_not             // Operador NOT (!) - asociatividad por derecha
%left tok_igual tok_dif    // Operadores relacionales: ==, !=
%left tok_menor tok_menorIgual tok_mayor tok_mayorIgual // <, <=, >, >=
%left tok_sum tok_sub      // Operadores aritméticos: +, -
%left tok_mul tok_div tok_mod // Operadores aritméticos: *, /, %
%right tok_expo            // Operador exponente (^) - asociatividad por derecha
%right tok_negUna          // Operador unario negativo (-) - mayor precedencia
%nonassoc resw_retornar
//%right tok_asign
//Gramatica 
%start INICIO
%%
INICIO :
        INSTRUCCIONES EOF    {return $1} |
        EOF                  {return []} ;
INSTRUCCIONES :
        INSTRUCCIONES INSTRUCCION {$$.push($2)} |
        INSTRUCCION         {$$ = [$1]} ;

INSTRUCCION :
        
        DECLARACION                   {$$ = $1}  |
        OBJETOS                       {$$ = $1}  |
        ASIGNACION_METODOS_OBJETOS    {$$ = $1}  |
        CONDICION                     {$$ = $1}  |
        MODIFICACION_LISTA            {$$ = $1}  |
        ASIGNACION                    {$$ = $1}  |
        UNARIOS                       {$$ = $1}  |
        IMPRIMIR                      {$$ = $1}  |
        CICLO_PARA                    {$$ = $1}  |
        CICLO_MIENTRAS                {$$ = $1}  |
        CICLO_REPETIR_HASTA           {$$ = $1}  |
        SELECCION_MULTIPLE            {$$ = $1}  |
        DETENER                       {$$ = $1}  |
        CONTINUAR                     {$$ = $1}  |
        RETORNAR_SIN_VALOR            {$$ = $1}  |
        RETORNAR_CON_VALOR            {$$ = $1}  |
        FUNCION                       {$$ = $1}  |
        PROCEDIMIENTOS                {$$ = $1}  |
        LLAMADA_PROCEDIMIENTOS        {$$ = $1}  |
        error               {errores.push(new Error(this._$.first_line, this._$.first_column + 1, ErrType.SYNTAX, `No se esperaba «${yytext}»`))} ;

OBJETOS : 
            resw_objeto tok_id tok_par_Abierto ATRIBUTORS_OBJETO tok_par_Cerrado {$$ = new GuardarObjeto(@1.first_line, @1.first_column, $2, $4)} ;

ATRIBUTORS_OBJETO :
            ATRIBUTORS_OBJETO ATRIBUTO_OBJETO {$$.push($2)} |
            ATRIBUTO_OBJETO                   {$$ = [$1]  } ;

ATRIBUTO_OBJETO:
            tok_id TIPO {$$ = new Atributo($1, $2, undefined)} ;
// === OBTNER OBJETO ===
OBTENER_OBJETO:
            resw_objeto tok_id tok_par_Abierto tok_par_Cerrado {$$ = new ObjectAcces(@1.first_line, @1.first_column, $2)} ;

// === CREAR METODOS EN LOS OBJETOS ====

ASIGNACION_METODOS_OBJETOS:
      //  tok_id tok_asign_metodo tok_id resw_con resw_parametros tok_par_Abierto PARAMETROS tok_par_Cerrado INSTRUCCIONES resw_fin resw_metodo {/*$$ = new Asignacion(@1.first_line, @1.first_column, $1, $3, $7, $9)*/}|
        tok_id  resw_fin resw_metodo {/*$$ = new Asignacion(@1.first_line, @1.first_column, $1, $3, $4)*/} ;

PROCEDIMIENTOS :
            resw_procedimiento tok_id  resw_con resw_parametros tok_par_Abierto PARAMETROS tok_par_Cerrado INSTRUCCIONES resw_fin resw_procedimiento {$$ = new Procedimiento(@1.first_line, @1.first_column, $2, "Procedimiento", $6, $8)} |
            resw_procedimiento tok_id  INSTRUCCIONES resw_fin resw_procedimiento {$$ = new Procedimiento(@1.first_line, @1.first_column, $2, "Procedimiento", [], $3)} ; 

LLAMADA_PROCEDIMIENTOS :
        resw_ejecutar tok_id tok_par_Abierto tok_par_Cerrado {$$ = new LlamadaProcedimiento(@1.first_line, @1.first_column, $2, [])} |
        resw_ejecutar tok_id tok_par_Abierto ARGUMENTOS tok_par_Cerrado {$$ = new LlamadaProcedimiento(@1.first_line, @1.first_column, $2, $4)} ;




SELECCION_MULTIPLE :
    resw_segun EXPR resw_hacer LISTA_CASOS OPCIONAL_DEFAULT resw_fin resw_segun {
        $$ = new SwitchStatement(@1.first_line, @1.first_column, $2, $4, $5);
    };

LISTA_CASOS :
    LISTA_CASOS CASO { $1.push($2); $$ = $1; } |
    CASO { $$ = [$1]; };

CASO :
    resw_en resw_caso resw_de resw_ser EXPR resw_entonces INSTRUCCIONES resw_detener {
        $$ = { condition: $5, body: $7 };
    };

OPCIONAL_DEFAULT :
    resw_de resw_lo resw_contrario resw_entonces INSTRUCCIONES resw_detener {
        $$ = $5; // Guardar las instrucciones del caso por defecto
    } |
    /* Vacío */ {
        $$ = null; // No hay caso por defecto
    };

FUNCION :
            resw_funcion tok_id TIPO resw_con resw_parametros tok_par_Abierto PARAMETROS tok_par_Cerrado INSTRUCCIONES resw_fin resw_funcion {$$ = new Funcion(@1.first_line, @1.first_column, $2, $3, $7, $9)} |
            resw_funcion tok_id TIPO INSTRUCCIONES resw_fin resw_funcion {$$ = new Funcion(@1.first_line, @1.first_column, $2, $3, [], $4)} ;
 
  
PARAMETROS :
            PARAMETROS tok_coma PARAMETRO {$$.push($3)} |
            PARAMETRO {$$ = [$1]} ;

PARAMETRO :
            tok_id TIPO {$$ = new Parametro(@1.first_line, @1.first_column, $1, $2)} ;

LLAMAR_FUNCIONE :
            tok_id tok_par_Abierto tok_par_Cerrado {$$ = new LlamadaFUncion(@1.first_line, @1.first_column, $1, [])} |
            tok_id tok_par_Abierto ARGUMENTOS tok_par_Cerrado {$$ = new LlamadaFUncion(@1.first_line, @1.first_column, $1, $3)} ;

ARGUMENTOS :
            ARGUMENTOS tok_coma EXPR {$$.push($3)} |
            EXPR {$$ = [$1]} ;
        




DETENER :
    resw_detener{  $$ = new Detener(@1.first_line, @1.first_column); } ;

CONTINUAR :
    resw_continuar{$$ = new Continuar(@1.first_line, @1.first_column);};

RETORNAR_CON_VALOR :
    
    resw_retornar EXPR {  $$ = new Return(@1.first_line, @1.first_column, $2);};

RETORNAR_SIN_VALOR :
    
    resw_regresar {  $$ = new Retornar(@1.first_line, @1.first_column);};

CICLO_PARA :
    resw_para tok_id tok_asign EXPR resw_hasta EXPR resw_con VALOR_INC_DEC EXPR_PARA resw_hacer INSTRUCCIONES resw_fin resw_para
    {
        $$ = new ForLoop(@1.first_line, @1.first_column, $2, $4, $6, $8, $9, $11);
    };
VALOR_INC_DEC :
    resw_incremento_entero { $$ = $1 } |
    resw_decremento_entero { $$ = $1 } ;

EXPR_PARA :
    resw_incremento tok_par_Abierto tok_id tok_par_Cerrado {  $$ = new Primit(@1.first_line, @1.first_column, "1", Tip.ENTERO); } |
    resw_decremento tok_par_Abierto tok_id tok_par_Cerrado { $$ = new Primit(@1.first_line, @1.first_column, "1", Tip.ENTERO); } |
    tok_id resw_incremento_mas {  $$ = new Primit(@1.first_line, @1.first_column, "1", Tip.ENTERO);} |
    tok_id resw_decremento_menos { $$ = new Primit(@1.first_line, @1.first_column, "1", Tip.ENTERO); } |
    EXPR { $$ = $1 } ;


CICLO_MIENTRAS :
    resw_mientras EXPR resw_hacer INSTRUCCIONES resw_fin resw_mientras
    { $$ = new WhileLoop(@1.first_line, @1.first_column, $2, $4); };

CICLO_REPETIR_HASTA :
    resw_repetir INSTRUCCIONES resw_hasta resw_que EXPR_CICLOPARA TERMS EXPR_CICLOPARA
    {
        $$ = new DoWhileLoop(@1.first_line, @1.first_column, $2, $5, $6, $7);
    };

EXPR_CICLOPARA :
   tok_id         { $$ = new Acces(@1.first_line, @1.first_column, $1);                }|
   tok_double     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.DECIMAL);  }|
   tok_int        { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.ENTERO);   }; 
  
    

TERMS :
    tok_dif                  { $$ = $1; } |
    tok_mayor                { $$ = $1; } |
    tok_menor                { $$ = $1; } |
    tok_mayorIgual           { $$ = $1; } |
    tok_menorIgual           { $$ = $1; } |
    tok_igual                { $$ = $1; } ;


CONDICION:
        SI_SIMPLE { $$ = $1 } |
        SI_COMPLETO { $$ = $1 } |
        SI_MULTIPLE { $$ = $1 };
SI_SIMPLE:
        resw_si EXPR resw_entonces INSTRUCCIONES resw_fin resw_si
        { $$ = new IfStatement(@1.first_line, @1.first_column, $2, $4, null) };
SI_COMPLETO:
        resw_si EXPR resw_entonces INSTRUCCIONES resw_de resw_lo resw_contrario INSTRUCCIONES resw_fin resw_si
        { $$ = new IfStatement(@1.first_line, @1.first_column, $2, $4, $8) };
SI_MULTIPLE:
        resw_si EXPR resw_entonces INSTRUCCIONES LISTA_ELSEIF resw_de resw_lo resw_contrario INSTRUCCIONES resw_fin resw_si
        { $$ = new IfStatement(@1.first_line, @1.first_column, $2, $4, $9, $5) };
LISTA_ELSEIF:
        LISTA_ELSEIF ELSEIF { $1.push($2); $$ = $1 } |
        ELSEIF { $$ = [$1] };
ELSEIF:
        resw_o resw_si EXPR resw_entonces INSTRUCCIONES
        { $$ = { condition: $3, body: $5 } };
UNARIOS :
        resw_incremento tok_par_Abierto tok_id tok_par_Cerrado {$$ = new Unarios(@1.first_line, @1.first_column, $1,$3)} |
        resw_decremento tok_par_Abierto tok_id tok_par_Cerrado {$$ = new Unarios(@1.first_line, @1.first_column, $1,$3)} |
        tok_id resw_incremento_mas {$$ = new Unarios(@1.first_line, @1.first_column, $2,$1)} |
        tok_id resw_decremento_menos {$$ = new Unarios(@1.first_line, @1.first_column, $2,$1)} ;
        
ASIGNACION :
    LISTA_DECLARACIONES tok_asign LISTA_EXPRESIONES { $$ = new Asignacion(@1.first_line, @1.first_column, $1, $3) };

DECLARACION :
    resw_ingresar LISTA_DECLARACIONES resw_como TIPO resw_con resw_valor LISTA_EXPRESIONES { $$ = new DeclVar(@1.first_line, @1.first_column, $2, $4, $7) } |
    resw_ingresar LISTA_DECLARACIONES resw_como TIPO { $$ = new DeclVar(@1.first_line, @1.first_column, $2, $4, undefined)} |
    resw_ingresar resw_lista tok_par_Abierto tok_int tok_coma TIPO tok_par_Cerrado tok_id tok_asign LISTA_VALORES {
        $$ = new ListDeclaration(@1.first_line, @1.first_column, $8, $4, $6, $10);
    };

LISTA_DECLARACIONES :
    tok_id { $$ = [$1] } |
    LISTA_DECLARACIONES tok_coma tok_id { $1.push($3); $$ = $1 };


LISTA_VALORES :
    tok_par_Abierto LISTA_CONTENIDO tok_par_Cerrado { $$ = $2; };

LISTA_CONTENIDO :
    ELEMENTO { $$ = [$1]; } |
    LISTA_CONTENIDO tok_coma ELEMENTO { $1.push($3); $$ = $1; };

ELEMENTO :
    EXPR_LISTAS { $$ = $1; } |
    tok_par_Abierto LISTA_CONTENIDO tok_par_Cerrado { $$ = $2; };

EXPR_LISTAS :
        CASTEO         { $$ = $1; } |
        ACCESO_LISTA   { $$ = $1; } |
        tok_id         { $$ = new Acces(@1.first_line, @1.first_column, $1);                }|
        tok_string     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CADENA);   }|
        tok_char       { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CARACTER); }|
        tok_double     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.DECIMAL);  }|
        tok_int        { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.ENTERO);   }| 
        resw_verdadero { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.BOOLEAN);  }|
        resw_falso     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.BOOLEAN);  };

MODIFICACION_LISTA :
    ACCESO_LISTA tok_asign_igual EXPR_LISTAS { $$ = new ModifyList(@1.first_line, @1.first_column, $1, $3); };
    // termina listas
// ID_DECLARACION :
//     tok_id { $$ = $1 };

IMPRIMIR :
        resw_imprimir tok_par_Abierto EXPR tok_par_Cerrado tok_pyc {$$ = new print(@1.first_line, @1.first_column, $3, false)} |
        resw_imprimirLn tok_par_Abierto EXPR tok_par_Cerrado tok_pyc {$$ = new print(@1.first_line, @1.first_column, $3, true)} ;
CASTEO :
        tok_par_Abierto TIPO tok_par_Cerrado EXPR_CASTEO {$$ = new Casteo(@1.first_line, @1.first_column, $2, $4)} ;
EXPR_CASTEO :
        
        tok_id         { $$ = new Acces(@1.first_line, @1.first_column, $1); } |
        tok_string     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CADENA); } |
        tok_char       { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CARACTER); } |
        tok_double     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.DECIMAL); } |
        tok_int        { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.ENTERO); } ;   
EXPR :
    TERNARIO       { $$ = $1; } |
    ARITMETICOS    { $$ = $1; } |
    ACCESO_LISTA   { $$ = $1; } |
    RELACIONALES   { $$ = $1; } |
    LOGICOS        { $$ = $1; } |
    FUNCIONES_NAT  { $$ = $1; } |
    CASTEO         { $$ = $1; } |  
    LLAMAR_FUNCIONE { $$ = $1; } |
    OBTENER_OBJETO { $$ = $1; } |
    tok_id         { $$ = new Acces(@1.first_line, @1.first_column, $1); } |
    resw_verdadero { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.BOOLEAN); } |
    resw_falso     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.BOOLEAN); } |
    tok_string     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CADENA); } |
    tok_char       { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.CARACTER); } |
    tok_double     { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.DECIMAL); } |
    tok_int        { $$ = new Primit(@1.first_line, @1.first_column, $1, Tip.ENTERO); } |
    tok_par_Abierto EXPR tok_par_Cerrado { $$ = $2; }  // Paréntesis agrupados
    ;

TERNARIO :
    EXPR tok_interrogacion EXPR tok_dosPuntos EXPR %prec tok_ternario
      { $$ = new Ternario(@1.first_line, @1.first_column, $1, $3, $5); } 
    ;
LISTA_EXPRESIONES :
    EXPR { $$ = [$1]                                       } |                     
    LISTA_EXPRESIONES tok_coma EXPR { $1.push($3); $$ = $1 } ;

FUNCIONES_NAT :
    resw_minuscula tok_par_Abierto EXPR tok_par_Cerrado       { $$ = new Minuscula(@1.first_line, @1.first_column, $3); } |
    resw_mayuscula tok_par_Abierto EXPR tok_par_Cerrado       { $$ = new Mayuscula(@1.first_line, @1.first_column, $3); } |
    resw_longitud tok_par_Abierto EXPR tok_par_Cerrado        { $$ = new Longitud(@1.first_line, @1.first_column, $3); } |
    resw_truncar tok_par_Abierto EXPR tok_par_Cerrado         { $$ = new Truncar(@1.first_line, @1.first_column, $3); } |
    resw_redondear tok_par_Abierto EXPR tok_par_Cerrado       { $$ = new Redo(@1.first_line, @1.first_column, $3); } |
    resw_tipo tok_par_Abierto EXPR tok_par_Cerrado            { $$ = new Tipo(@1.first_line, @1.first_column, $3); }
    ;

ACCESO_LISTA :
    tok_id tok_cor_Abierto tok_int tok_cor_Cerrado { $$ = new AccessList(@1.first_line, @1.first_column, $1, [$3]); } |
    ACCESO_LISTA tok_cor_Abierto tok_int tok_cor_Cerrado {$1.indices.push($3);$$ = $1;};

RELACIONALES :
        EXPR tok_igual EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_dif   EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_mayor EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_menor  EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_mayorIgual EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_menorIgual EXPR {$$ = new Rel(@1.first_line, @1.first_column, $1, $2, $3)} ;
LOGICOS : 
        EXPR tok_and EXPR {$$ = new logic(@1.first_line, @1.first_column, $1, $2, $3)       } |
        EXPR tok_or  EXPR {$$ = new logic(@1.first_line, @1.first_column, $1, $2, $3)       } |
        tok_not EXPR      {$$ = new logic(@1.first_line, @1.first_column, $1, $1, $2)       } ;
ARITMETICOS :
        EXPR tok_sum EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_sub EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_mul EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_div EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_mod EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        EXPR tok_expo EXPR {$$ = new Arit(@1.first_line, @1.first_column, $1, $2, $3)} |
        tok_sub EXPR %prec tok_negUna {$$ = new Arit(@1.first_line, @1.first_column, undefined, $1, $2)} ;
TIPO :
        resw_entero   {$$ = Tip.ENTERO}  |
        resw_decimal  {$$ = Tip.DECIMAL} |
        resw_booleano {$$ = Tip.BOOLEAN} |
        resw_caracter {$$ = Tip.CARACTER}|
        resw_cadena   {$$ = Tip.CADENA}  ;